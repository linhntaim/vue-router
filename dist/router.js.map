{"version":3,"sources":["../src/router.js"],"names":["AfterMiddlewareManager","BeforeMiddlewareManager","Middleware","session","VueRouter","Router","constructor","options","routePathByNames","beforeDefault","beforeRouting","beforeEnabled","afterDefault","afterRouting","afterEnabled","authRoutes","notAuthRoutes","parseRoutes","beforeEach","to","from","next","skipping","middlewareGroups","slice","matched","forEach","route","meta","add","middleware","push","Array","isArray","subMiddleware","before","length","run","afterEach","after","abortSkipping","parseRoute","parentPath","routePath","path","replace","name","children","childRoute","routes","getPathByName","replaceRoutes","matcher","switchToAuth","switchToNotAuth","softReplace","location","onComplete","onAbort","skip","catchSoftReplace"],"mappings":"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","sourcesContent":["import {AfterMiddlewareManager, BeforeMiddlewareManager, Middleware} from './middleware'\r\nimport session from './session'\r\nimport VueRouter from 'vue-router'\r\n\r\nexport default class Router extends VueRouter {\r\n    constructor(options = {}) {\r\n        super(options)\r\n\r\n        this.routePathByNames = {}\r\n\r\n        this.beforeDefault = this.options.beforeDefault ? this.options.beforeDefault : []\r\n        this.beforeRouting = this.options.beforeRouting ? this.options.beforeRouting : null\r\n        this.beforeEnabled = this.options.beforeEnabled ? this.options.beforeEnabled : () => true\r\n        this.afterDefault = this.options.afterDefault ? this.options.afterDefault : []\r\n        this.afterRouting = this.options.afterRouting ? this.options.afterRouting : null\r\n        this.afterEnabled = this.options.afterEnabled ? this.options.afterEnabled : () => true\r\n        this.authRoutes = this.options.authRoutes ? this.options.authRoutes : null\r\n        this.notAuthRoutes = this.options.notAuthRoutes ? this.options.notAuthRoutes : null\r\n\r\n        delete this.options.beforeDefault\r\n        delete this.options.beforeRouting\r\n        delete this.options.beforeEnabled\r\n        delete this.options.afterDefault\r\n        delete this.options.afterRouting\r\n        delete this.options.afterEnabled\r\n        delete this.options.authRoutes\r\n        delete this.options.notAuthRoutes\r\n\r\n        this.parseRoutes()\r\n\r\n        this.beforeEach((to, from, next) => {\r\n            this.beforeRouting && this.beforeRouting(to, from)\r\n\r\n            if (this.beforeEnabled(to, from) && !session.skipping()) {\r\n                const middlewareGroups = this.beforeDefault.slice(0)\r\n                to.matched.forEach(route => {\r\n                    if ('middleware' in route.meta) {\r\n                        const add = middleware => {\r\n                            if (middleware instanceof Middleware) {\r\n                                middlewareGroups.push(middleware)\r\n                                return\r\n                            }\r\n                            if (Array.isArray(middleware)) {\r\n                                middleware.forEach(subMiddleware => add(subMiddleware))\r\n                                return\r\n                            }\r\n                            if ('before' in middleware) {\r\n                                add(middleware.before)\r\n                            }\r\n                        }\r\n                        add(route.meta.middleware)\r\n                    }\r\n                })\r\n\r\n                if (middlewareGroups.length) {\r\n                    (new BeforeMiddlewareManager(middlewareGroups, this)).run(to, from, next)\r\n                    return\r\n                }\r\n            }\r\n\r\n            next()\r\n        })\r\n\r\n        this.afterEach((to, from) => {\r\n            if (this.afterEnabled(to, from) && !session.skipping()) {\r\n                const middlewareGroups = []\r\n                to.matched.forEach(route => {\r\n                    if ('middleware' in route.meta) {\r\n                        const add = middleware => {\r\n                            if (middleware instanceof Middleware) {\r\n                                middlewareGroups.push(middleware)\r\n                                return\r\n                            }\r\n                            if (Array.isArray(middleware)) {\r\n                                middleware.forEach(subMiddleware => add(subMiddleware))\r\n                                return\r\n                            }\r\n                            if ('after' in middleware) {\r\n                                add(middleware.after)\r\n                            }\r\n                        }\r\n                        add(route.meta.middleware)\r\n                    }\r\n                })\r\n                middlewareGroups.push(...this.afterDefault.slice(0))\r\n                if (middlewareGroups.length) {\r\n                    (new AfterMiddlewareManager(middlewareGroups, this)).run(to, from)\r\n                }\r\n            }\r\n\r\n            session.skipping() && session.abortSkipping()\r\n            this.afterRouting && this.afterRouting(to, from)\r\n        })\r\n    }\r\n\r\n    parseRoute(route, parentPath = '') {\r\n        const routePath = '/' + (parentPath + '/' + route.path).replace(/\\/+/g, '/').replace(/^\\/|\\/$/g, '')\r\n        if (route.name) {\r\n            this.routePathByNames[route.name] = routePath\r\n        }\r\n        route.children && route.children.length && route.children.forEach(childRoute => {\r\n            this.parseRoute(childRoute, routePath)\r\n        })\r\n    }\r\n\r\n    parseRoutes() {\r\n        this.routePathByNames = {}\r\n        this.options.routes.forEach(route => {\r\n            this.parseRoute(route)\r\n        })\r\n    }\r\n\r\n    getPathByName(name) {\r\n        return name in this.routePathByNames ? this.routePathByNames[name] : null\r\n    }\r\n\r\n    replaceRoutes(routes) {\r\n        this.options.routes = routes\r\n        this.matcher = (new Router(this.options)).matcher\r\n\r\n        this.parseRoutes()\r\n\r\n        return this\r\n    }\r\n\r\n    switchToAuth() {\r\n        if (this.authRoutes) {\r\n            this.replaceRoutes(this.authRoutes)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    switchToNotAuth() {\r\n        if (this.notAuthRoutes) {\r\n            this.replaceRoutes(this.notAuthRoutes)\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    softReplace(location, onComplete = null, onAbort = null) {\r\n        session.skip()\r\n        this.replace(location, onComplete, () => {\r\n            onAbort && onAbort()\r\n        })\r\n    }\r\n\r\n    catchSoftReplace(location, onComplete = null, onAbort = null) {\r\n        session.skip()\r\n        return this.replace(location, onComplete, onAbort)\r\n    }\r\n}\r\n"],"file":"router.js"}